
метод простых итераций
import numpy as np
A = [
[4,-1,2],
[1,-5,3],
[2,-6,-8]]
B = [2, 3, -8]

# точность итераций
eps = 1e-4

a = np.array(A)
diag = (1/np.diag(a)).reshape(-1,1)
a[np.diag_indices_from(a)] = 0.
a = np.hstack((-a, np.array(B).reshape(-1, 1))) * diag
x = a[:,-1].ravel()
x = np.append(x, 1)

tmp = x.copy() + eps
cnt = 0
while abs(x-tmp).sum() > eps:
    tmp = x.copy()
    x = a.dot(x)
    x = np.append(x, 1)
    cnt += 1

print(x[:-1].round(), cnt)


из гита:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
%matplotlib inline

крамера
def get_det(m):
    '''
    Принимает матрицу - квадратный двумерный numpy array типа float
    Возвращает определитель заданной матрицы
    '''

    if len(m) == 2:
        return m[0][0] * m[1][1] - m[0][1] * m[1][0]
    else:
        D = 0
        for i in range(len(m)): # i - индекс вычёркиваемого столбца
            M = m[0, i]
            new_m = []

            for j in range(len(m)):
                for k in range(len(m)):
                    if (j != 0 and k != i):
                        new_m.append(m[j, k])

            new_m = np.array(new_m).reshape((len(m) - 1, len(m) - 1))

            if (i + 1) % 2 == 0:
                D += M * get_det(new_m)
            else:
                D -= M * get_det(new_m)

        return D

def сramer(A, b):
    '''
    Приминает на вход две переменные:
    A - матрица коэффициентов - квадратный двумерный numpy array типа float
    b - вектор свободных членов - numpy array типа float
    Вовращает вектор решений
    '''

    # считаем главный определитель
    D = get_det(A)

    if (D == 0):
        print('Решить методом Крамера невозможно (главный определитель = 0)')
    else:
        # список побочных определителей
        dets = []

        for i in range(len(A)):
            copied_A = np.array(A)
            copied_A[:, i] = b
            dets.append(get_det(copied_A))

        # вектор решений
        x = []
        for curr_det in dets:
            x.append(float(curr_det) / D)

        return x

гаусса
def gaussian(A, b):
    '''
    Приминает на вход две переменные:
    A - матрица коэффициентов - квадратный двумерный numpy array типа float
    b - вектор свободных членов - numpy array типа float
    Вовращает вектор решений
    '''

    # составляем расширенную матрицу системы
    reshaped_b = b.reshape((len(b), 1))
    A = np.hstack((A, reshaped_b))

    # приводим матрицу к треугольному виду
    # i - опорная строка
    # j - текущая строка (всегда меньше i)
    for i in range(len(A)):
        for j in range(i + 1, len(A)):
            A[j] -= A[i] * A[j][i] / A[i][i]

    # обратный ход
    x = np.array([0] * len(b), dtype=float) # вектор решений

    i = len(A) - 1
    while i >= 0:
        x[i] = (A[i][-1] - sum(x * A[i][0:-1])) / A[i][i]
        i -= 1

    return x


тестирование
A_list = [ [[4, 2, -1],
            [5, 3, -2],
            [3, 2, -3]],

           [[3, 2, -5],
            [2, -1, 3],
            [1, 2, -1]] ]

b_list = [ [1, 2, 0],
           [-1, 13, 9] ]

# преобразуем python массивы в numpy массивы с нужным типом
for A in A_list:
    A = np.array(A, dtype=float)

for b in b_list:
    b = np.array(b, dtype=float)

for i in range(len(A_list)):
    print('Матрица:')
    for row in A_list[i]:
        print(row)

    print('Вектор свободных членов:')
    print(b_list[i])

    print('Решение методом Крамера:')
    print(сramer(A, b))

    print('Решение методом Гаусса:')
    print(gaussian(A, b), '\n')


итераций
def iterative_method(A, b):
    alpha = -A / A.diagonal().reshape(A.shape[0], 1)
    np.fill_diagonal(alpha, 0)

    beta = b / A.diagonal()

    results_list = []
    iterations = 0

    x_prev = b
    while (1):
        x = beta + np.dot(alpha, x_prev)

        results_list.append(x)
        iterations += 1

        if np.sum(np.abs(x - x_prev) / np.abs(x)) == 0:
            return (x, iterations, results_list)
        else:
            x_prev = x


зейделя
def seidel_method(A, b):
    C = np.dot(A.T, A)
    d = np.dot(A.T, b)

    alpha = -C / C.diagonal().reshape(C.shape[0], 1)
    np.fill_diagonal(alpha, 0)

    beta = d / C.diagonal()

    L = np.tril(alpha)
    U = np.triu(alpha)
    E = np.eye(alpha.shape[0])

    results_list = []
    iterations = 0

    x_prev = b
    while (1):
        first = np.dot(np.linalg.inv(E - L), U)
        second = np.dot(np.linalg.inv(E - L), beta)
        x = np.dot(first, x_prev) + second

        results_list.append(x)
        iterations += 1

        if np.sum(np.abs(x - x_prev) / np.abs(x)) == 0:
            return (x, iterations, results_list)
        else:
            x_prev = x


тестирование
result = iterative_method(A, b)
answer, iterations, results_list = result[0], result[1], result[2]

print('Результат:', answer)

result = seidel_method(A, b)
answer, iterations, results_list = result[0], result[1], result[2]

print('Результат:', answer)